"
" Author: Frank
" Repository: https://github.com/Frank-Zuo/vim_config
" Create Date: 2019-03-07
"
" NOTE: Only use the config which you know ti's meaning.
"
" Vundle 基本说明：
" 1、安装: git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
" 2、插件安装方式
"    安装插件的命令必须放在 vundle#begin 和 vundle#end 之间.
"   2.1 从 GitHub 进行安装
"       格式: Plugin '用户名/插件仓库名'
"       示例: Plugin 'tpope/vim-fugitive'
"   2.2 从 http://vim-scripts.org/vim/scripts.html 进行安装
"       格式: Plugin '插件名称'            实际上是 Plugin 'vim-scripts/插件仓库名' 只是此处的用户名可以省略
"       示例: Plugin 'L9'
"   2.3 从不在 GitHub 上的另一个 git 软件库进行安装
"       格式: Plugin 'git://git.another_repo.com/plugin'
"       示例: Plugin 'git://git.wincent.com/command-t.git'
"   2.4 从本地文件进行安装
"       格式: Plugin 'file:///+本地插件仓库绝对路径'
"       示例: Plugin 'file:///home/gmarik/path/to/plugin'
"   2.5 插件在仓库的子目录中
"       格式: Plugin '用户名/插件仓库名',{'rtp': '子目录'}     -- rtp: runtimepath
"       示例: Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}       范例插件在 sparkup/vim 目录下
"   2.6 插件命名冲突，更名插件
"       格式: Plugin 'user/plugin', {'name': 'newPlugin'}
"       示例: Plugin 'ascenator/L9', {'name': 'newL9'}         已经安装 L9，再次安装另一个 L9
" 3、常用命令
"   3.1 列出所有已配置的插件
"       :PluginList
"   3.2 安装一个新的插件
"       :PluginInstall                 - 安装 .vimrc.bundles 中列出来的所有插件，追加 `!` 用以更新
"       :PluginInstall <plugin-name>   - 只安装某一个特定的插件，只需要传递其名称
"   3.3 更新插件
"       :PluginUpdate
"   3.4 清理闲置未用的插件
"       :PluginClean                   - 清除未使用插件,需要确认; 追加 `!` 自动批准移除未使用插件
"   3.5 搜索插件
"       :PluginSearch <text-list>      - 搜索过程中，可以在交互式分屏上安装、清理、研究或重新装入同一列表。想自动装入插件，需将插件添加到 .vimrc.bundles 文件
"       :PluginSearch foo              - 搜索 foo ; 追加 `!` 清除本地缓存
"       :PluginSearch taglist          - 搜索完成后，可以按下'i'进行安装
"

set nocompatible              " 去除VI一致性,必须
filetype off                  " 必须

" 设置包括 vundle 和初始化相关的 runtimepath
set rtp+=~/.vim/bundle/Vundle.vim

"********************************************************************************
" 插件列表
"********************************************************************************

call vundle#begin()
" 另一种选择, 指定一个 vundle 安装插件的路径
"call vundle#begin('~/some/path/here')

"********************************************************************************
" 让 vundle 管理插件版本,必须
Plugin 'VundleVim/Vundle.vim'

"********************************************************************************
" 主题 solarized
Plugin 'altercation/vim-colors-solarized'
let g:solarized_termtrans  = 1             " 使用 termnal 背景
"let g:solarized_termcolors = 256           " 使用 256 配色
let g:solarized_visibility = "low"         " set list 显示特殊符号的方式

" 主题 molokai
Plugin 'tomasr/molokai'
let g:molokai_original = 1   " 使用原始配色方案

"********************************************************************************
" 目录树 nerdtree
" <leader>nt 打开 nerdtree
" q          关闭 nerdtree
Plugin 'scrooloose/nerdtree'
let NERDTreeHighlightCursorline = 1       " 高亮当前行
let NERDTreeShowLineNumbers     = 1       " 显示行号
" 忽略列表中的文件
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.egg$', '^\.git$', '^\.repo$', '^\.svn$', '^\.hg$' ]

" 当打开 VIM，没有指定文件时和打开一个目录时，打开 NERDTree
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

" 关闭 NERDTree，当没有文件打开的时候
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end

"********************************************************************************
" 标签导航 tagbar
" 在 tagbar 一栏内输入 F1 可以查看快捷方式
" 插件依赖 ctags，安装命令: $ sudo apt install ctags
Plugin 'majutsushi/tagbar'
let g:tagbar_ctags_bin = 'ctags' " tagbar 依赖 ctags 插件
let g:tagbar_width     = 30      " 设置 tagbar 的宽度为 30 列，默认 40 列
let g:tagbar_autofocus = 1       " 打开 tagbar 时光标在 tagbar 页面内，默认在 vim 打开的文件内
let g:tagbar_left      = 1       " 让 tagbar 在页面左侧显示，默认右边
"let g:tagbar_sort      = 0       " 标签不排序，默认排序

" 标签列表 taglist
Plugin 'vim-scripts/taglist.vim'
let Tlist_Show_One_File           = 1    " 只显示当前文件的tags
let Tlist_GainFocus_On_ToggleOpen = 1    " 打开 Taglist 窗口时，光标跳到 Taglist 窗口
let Tlist_Exit_OnlyWindow         = 1    " 如果Taglist窗口是最后一个窗口则退出Vim
let Tlist_Use_Left_Window         = 1    " 在左侧窗口中显示
let Tlist_File_Fold_Auto_Close    = 1    " 自动折叠
let Tlist_Auto_Update             = 1    " 打开新文件或修改文件后自动更新标签

"********************************************************************************
" 模糊搜索
Plugin 'junegunn/fzf', { 'dir': '~/.vim/bundle/fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'

" 调用 Rg 进行搜索，包含隐藏文件
" 此命令依赖 ripgrep，ripgrep 安装请参照 https://github.com/BurntSushi/ripgrep
command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
    \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
    \   <bang>0 ? fzf#vim#with_preview('up:60%')
    \           : fzf#vim#with_preview('right:50%:hidden', '?'),
    \   <bang>0)

"********************************************************************************
" 快速定位
Plugin 'easymotion/vim-easymotion'
let g:EasyMotion_do_mapping = 0  " Disable default mappings
let g:EasyMotion_smartcase  = 1  " Turn on case-insensitive feature


"********************************************************************************
" 自动补全 YouCompleteMe
" 插件依赖: build-essential cmake python3-dev
" 语言支持安装：
" $ cd ~/.vim/bundle/YouCompleteMe
" $ python3 install.py --clang-completer   -- C
" $ python3 install.py --java-completer    -- java,需要安装 JDK8
Plugin 'Valloric/YouCompleteMe'
" 寻找全局配置文件
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
let g:ycm_min_num_of_chars_for_completion               = 2 " 输入第 2 个字符开始补全
let g:ycm_seed_identifiers_with_syntax                  = 1 " 语法关键字补全
let g:ycm_complete_in_comments                          = 1 " 在注释中也可以补全
let g:ycm_complete_in_strings                           = 1 " 在字符串输入中也能补全
let g:ycm_collect_identifiers_from_tag_files            = 1 " 使用 ctags 生成的 tags 文件
let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释和字符串中的文字也会被收入补全
let g:ycm_cache_omnifunc                                = 0 " 每次重新生成匹配项，禁止缓存匹配项
let g:ycm_use_ultisnips_completer                       = 0 " 不查询 ultisnips 提供的代码模板补全，如果需要，设置成 1 即可
let g:ycm_show_diagnostics_ui                           = 0 " 禁用语法检查

let g:ycm_key_list_select_completion   = ['<Down>']   " 选择下一条补全，Default: ['<TAB>', '<Down>']
let g:ycm_key_list_previous_completion = ['<Up>']     " 选择上一条补全，Default: ['<S-TAB>', '<Up>']
let g:ycm_key_list_stop_completion     = ['<Enter>']  " 中止此次补全，Default: ['<C-y>']

" 自定义代码片段补全
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'  " 片段
let g:UltiSnipsExpandTrigger       = "<c-tab>"     " 代码片段补全触发
let g:UltiSnipsListSnippets        = "<c-\>"       " 列出补全可选列表
let g:UltiSnipsJumpForwardTrigger  = "<c-j>"       " 下一条补全
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"       " 上一条补全
let g:UltiSnipsEditSplit           = "horizontal"  " how the edit window is opened

"********************************************************************************
" 代码对齐
Plugin 'godlygeek/tabular'

"********************************************************************************
" 快速添加/删除注释
Plugin 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims            = 1                                    " 在注释符号后加一个空格
let g:NERDCompactSexyComs        = 1                                    " 紧凑排布多行注释
let g:NERDDefaultAlign           = 'left'                               " 逐行注释左对齐
let g:NERDAltDelims_java         = 1                                    " JAVA 语言使用默认的注释符号
let g:NERDCustomDelimiters       = {'c': {'left': '/*', 'right': '*/'}} " C 语言注释符号
let g:NERDCommentEmptyLines      = 1                                    " 允许空行注释
let g:NERDTrimTrailingWhitespace = 1                                    " 取消注释时删除行尾空格
let g:NERDToggleCheckAllLines    = 1                                    " 检查选中的行操作是否成功

"********************************************************************************
" 代码动态检查
Plugin 'w0rp/ale'
let g:ale_lint_on_text_changed       = 'normal'                     " 代码更改后启动检查
let g:ale_lint_on_insert_leave       = 1                            " 退出插入模式即检查
let g:ale_sign_column_always         = 1                            " 总是显示动态检查结果
let g:ale_sign_error                 = '>>'                         " error 告警符号
let g:ale_sign_warning               = '--'                         " warning 告警符号
let g:ale_echo_msg_error_str         = 'E'                          " 错误显示字符
let g:ale_echo_msg_warning_str       = 'W'                          " 警告显示字符
let g:ale_echo_msg_format            = '[%linter%] %s [%severity%]' " 告警显示格式

" C 语言配置检查参数
let g:ale_c_gcc_options              = '-Wall -Werror -O2 -std=c11'
let g:ale_c_clang_options            = '-Wall -Werror -O2 -std=c11'
let g:ale_c_cppcheck_options         = ''

" C++ 配置检查参数
let g:ale_cpp_gcc_options            = '-Wall -Werror -O2 -std=c++14'
let g:ale_cpp_clang_options          = '-Wall -Werror -O2 -std=c++14'
let g:ale_cpp_cppcheck_options       = ''

"使用clang对c和c++进行语法检查，对python使用pylint进行语法检查
let g:ale_linters = {
\   'c++': ['clang', 'gcc'],
\   'c': ['clang', 'gcc'],
\   'python': ['pylint'],
\}

"********************************************************************************
" 状态栏优化 airline
Plugin 'vim-airline/vim-airline'
let g:airline_powerline_fonts                   = 1 " 使用 powerline 打过补丁的字体
let g:airline#extensions#tabline#enabled        = 1 " 开启 tabline
let g:airline#extensions#tabline#buffer_nr_show = 1 " 显示 buffer 编号
let g:airline#extensions#ale#enabled            = 1 " enable ale integration

" 状态栏显示图标设置
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

let g:airline_left_sep          = '⮀'
let g:airline_left_alt_sep      = '⮁'
let g:airline_right_sep         = '⮂'
let g:airline_right_alt_sep     = '⮃'
let g:airline_symbols.crypt     = '🔒'
let g:airline_symbols.linenr    = '⭡'
let g:airline_symbols.branch    = '⭠'
let g:airline_symbols.readonly  = ''

"********************************************************************************
" 个人 wiki
" 常用快捷键（normal 模式）：
" <Leader>ww             -- 打开默认的 wiki 目录文件
" <Leader>wt             -- 在新标签（Tab）中打开 wiki 目录文件
" <Leader>ws             -- 在多个 wiki 中选择并打开该 wiki 的目录文件
" <Leader>wd             -- 删除当前 wiki 文件
" <Leader>wr             -- 重命名当前 wiki 文件
" <Enter>                -- 创建或打开 wiki 链接
" <Shift-Enter>          -- 先上下分屏再打开 wiki 链接（若非链接则先创建）
" <Ctrl-Enter>           -- 先左右分屏再打开 wiki 链接（若非链接则先创建）
" <Backspace>            -- 返回之前浏览的 wiki 文件
" <Tab>                  -- 跳到本文件中下一个 wiki 链接
" <Shift-Tab>            -- 跳到本文件中上一个 wiki 链接
"
" 常用命令
" :Vimwiki2HTML          -- 将当前 wiki 文件转换成 HTML 网页
" :VimwikiAll2HTML       -- 把所有 wiki 文件转换成 HTML 网页
" :help vimwiki-commands -- 显示全部命令
Plugin 'vimwiki/vimwiki'

"********************************************************************************
" 所有插件需要在下面这行之前配置
call vundle#end()            " 必须
filetype plugin indent on    " 必须 加载vim自带和插件相应的语法和文件类型相关脚本

